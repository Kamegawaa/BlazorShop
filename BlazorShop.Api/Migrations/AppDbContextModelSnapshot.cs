// <auto-generated />
using BlazorShop.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorShop.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlazorShop.Api.Entities.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Carrinhos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            UsuarioId = 2
                        },
                        new
                        {
                            Id = 3,
                            UsuarioId = 3
                        },
                        new
                        {
                            Id = 4,
                            UsuarioId = 4
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.CarrinhoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarrinhoId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CarrinhoItems");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IconCSS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconCSS = "fas fa-car",
                            Nome = "Carros"
                        },
                        new
                        {
                            Id = 2,
                            IconCSS = "fas fa-motorcycle",
                            Nome = "Motos"
                        },
                        new
                        {
                            Id = 3,
                            IconCSS = "fas fa-tools",
                            Nome = "Acessórios"
                        },
                        new
                        {
                            Id = 4,
                            IconCSS = "fas fa-cogs",
                            Nome = "Peças"
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Descricao = "2006, Prata - Sedan. Com 150 mil km rodados ainda está em bom estado",
                            ImagemUrl = "/imagens/carros/carro1.png",
                            Nome = "Civic - Honda",
                            Preco = 25000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            Descricao = "2015, Preto - Sedan. Pouco rodado, bem conservado",
                            ImagemUrl = "/imagens/carros/carro2.png",
                            Nome = "Corolla - Toyota",
                            Preco = 60000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 1,
                            Descricao = "2019, Branco - Hatch. Econômico e com baixa quilometragem",
                            ImagemUrl = "/imagens/carros/carro3.png",
                            Nome = "Onix - Chevrolet",
                            Preco = 45000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 1,
                            Descricao = "2012, Vermelho - Hatch. Excelente para o dia a dia",
                            ImagemUrl = "/imagens/carros/carro4.png",
                            Nome = "Gol - Volkswagen",
                            Preco = 30000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 1,
                            Descricao = "2014, Cinza - Hatch. Completo e bem cuidado",
                            ImagemUrl = "/imagens/carros/carro5.png",
                            Nome = "Fiesta - Ford",
                            Preco = 35000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoriaId = 2,
                            Descricao = "2020, Preta - Motocicleta esportiva, potente e confortável",
                            ImagemUrl = "/imagens/motos/moto1.png",
                            Nome = "CB 500 - Honda",
                            Preco = 28000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoriaId = 2,
                            Descricao = "2021, Azul - Naked com motor bicilíndrico potente",
                            ImagemUrl = "/imagens/motos/moto2.png",
                            Nome = "MT-07 - Yamaha",
                            Preco = 38000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoriaId = 2,
                            Descricao = "2022, Verde - Esportiva, perfeita para quem quer adrenalina",
                            ImagemUrl = "/imagens/motos/moto3.png",
                            Nome = "Ninja 400 - Kawasaki",
                            Preco = 35000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoriaId = 2,
                            Descricao = "2020, Vermelha - Trail ideal para estradas de terra",
                            ImagemUrl = "/imagens/motos/moto4.png",
                            Nome = "XRE 300 - Honda",
                            Preco = 25000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoriaId = 2,
                            Descricao = "2019, Branca - Econômica e confortável para viagens",
                            ImagemUrl = "/imagens/motos/moto5.png",
                            Nome = "Fazer 250 - Yamaha",
                            Preco = 20000m,
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoriaId = 3,
                            Descricao = "Capacete LS2 FF320, viseira dupla, cor preta",
                            ImagemUrl = "/imagens/itens/item1.png",
                            Nome = "Capacete LS2",
                            Preco = 800m,
                            Quantidade = 5
                        },
                        new
                        {
                            Id = 12,
                            CategoriaId = 4,
                            Descricao = "Par de pneus Pirelli para motocicletas esportivas",
                            ImagemUrl = "/imagens/itens/item2.png",
                            Nome = "Jogo de Pneus Pirelli",
                            Preco = 1200m,
                            Quantidade = 3
                        },
                        new
                        {
                            Id = 13,
                            CategoriaId = 4,
                            Descricao = "Kit relação para motos 250cc, corrente, coroa e pinhão",
                            ImagemUrl = "/imagens/itens/item3.png",
                            Nome = "Kit Relação - DID",
                            Preco = 600m,
                            Quantidade = 2
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NomeUsuario = "Alex Santana"
                        },
                        new
                        {
                            Id = 2,
                            NomeUsuario = "Hugo Souza"
                        },
                        new
                        {
                            Id = 3,
                            NomeUsuario = "Breno Bidon"
                        },
                        new
                        {
                            Id = 4,
                            NomeUsuario = "Talles Magno"
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Carrinho", b =>
                {
                    b.HasOne("BlazorShop.Api.Entities.Usuario", null)
                        .WithOne("Carrinho")
                        .HasForeignKey("BlazorShop.Api.Entities.Carrinho", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.CarrinhoItem", b =>
                {
                    b.HasOne("BlazorShop.Api.Entities.Carrinho", "Carrinho")
                        .WithMany("Items")
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorShop.Api.Entities.Produto", "Produto")
                        .WithMany("Items")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Produto", b =>
                {
                    b.HasOne("BlazorShop.Api.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Carrinho", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Produto", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Usuario", b =>
                {
                    b.Navigation("Carrinho");
                });
#pragma warning restore 612, 618
        }
    }
}
